{"version":3,"sources":["scripts/main.js"],"names":["sortTableByProretry","e","tableEl","tableBody","currentTarget","closest","querySelector","sortPropIndex","target","cellIndex","rows","map","tr","sortValue","cells","innerText","element","sort","value1","value2","salary1","parseFloat","slice","isNaN","parseInt","age1","localeCompare","forEach","insertAdjacentElement","table","document","tableHead","addEventListener"],"mappings":";AAAA,aAyCA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAvCA,SAASA,EAAoBC,GACrBC,IACAC,EADUF,EAAEG,cAAcC,QAAQ,SACdC,cAAc,SAClCC,EAAgBN,EAAEO,OAAOC,UACzBC,EAAO,EAAIP,EAAUO,MACxBC,IAAI,SAAAC,GAAO,MAAA,CACVC,UAAWD,EAAGE,MAAMP,GAAeQ,UACnCC,QAASJ,KAGbF,EAAKO,KAAK,SAAkD,EAAA,GAApCC,IAAAA,EAAXL,EAAAA,UAAkCM,EAAXN,EAAAA,UAC1B,QAAA,GACDK,IAAc,MAAdA,EAAO,GAIHE,OAHSC,WAAWH,EAAOI,MAAM,IACxBD,WAAWF,EAAOG,MAAM,IAKrC,KAACC,MAAMC,SAASN,IAIZO,OAHMD,SAASN,GACTM,SAASL,GAKxB,QACSD,OAAAA,EAAOQ,cAAcP,MAKlCT,EAAKiB,QAAQ,SAAA,GAAGX,IAAAA,EAAAA,EAAAA,QAAcb,OAAAA,EAC3ByB,sBAAsB,YAAaZ,KAGxC,IAAMa,EAAQC,SAASxB,cAAc,SAC/ByB,EAAYF,EAAMvB,cAAc,SAEtCyB,EAAUC,iBAAiB,QAAShC","file":"main.9fdf2817.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nfunction sortTableByProretry(e) {\n  const tableEl = e.currentTarget.closest('table');\n  const tableBody = tableEl.querySelector('tbody');\n  const sortPropIndex = e.target.cellIndex;\n  const rows = [...tableBody.rows]\n    .map(tr => ({\n      sortValue: tr.cells[sortPropIndex].innerText,\n      element: tr,\n    }));\n\n  rows.sort(({ sortValue: value1 }, { sortValue: value2 }) => {\n    switch (true) {\n      case value1[0] === '$': {\n        const salary1 = parseFloat(value1.slice(1));\n        const salary2 = parseFloat(value2.slice(1));\n\n        return salary1 - salary2;\n      }\n\n      case !isNaN(parseInt(value1)): {\n        const age1 = parseInt(value1);\n        const age2 = parseInt(value2);\n\n        return age1 - age2;\n      }\n\n      default: {\n        return value1.localeCompare(value2);\n      }\n    }\n  });\n\n  rows.forEach(({ element }) => tableBody\n    .insertAdjacentElement('beforeend', element));\n}\n\nconst table = document.querySelector('table');\nconst tableHead = table.querySelector('thead');\n\ntableHead.addEventListener('click', sortTableByProretry);\n"]}